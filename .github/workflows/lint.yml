name: linting

# Controls when the action will run. 
on:
  # Triggers the workflow on push
  push:
  # Triggers the workflow on pull request events but only for the master branch
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  lint-with-PSScriptAnalyzer:
    name: Lint module with PSScriptAnalyzer
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install PSScriptAnalyzer module
      shell: pwsh
      run: |
            Set-PSRepository PSGallery -InstallationPolicy Trusted
            Install-Module PSScriptAnalyzer -ErrorAction Stop
    - name: Lint Office365-Scoutnet-synk with PSScriptAnalyzer
      shell: pwsh
      run: |
            Invoke-ScriptAnalyzer -Path .\Office365-Scoutnet-synk -Recurse -Outvariable issues
            $errors   = $issues.Where({$_.Severity -eq 'Error'})
            $warnings = $issues.Where({$_.Severity -eq 'Warning'})
            $Informations = $issues.Where({$_.Severity -eq 'Information'})
            if ($errors) {
                Write-Error "There were $($errors.Count) errors, $($Informations.Count) informations and $($warnings.Count) warnings total." -ErrorAction Stop
            } else {
                Write-Output "There were $($errors.Count) errors, $($Informations.Count) informations and $($warnings.Count) warnings total."
            }
    - name: Lint MaillistSynk.ps1 with PSScriptAnalyzer
      shell: pwsh
      run: |
            Invoke-ScriptAnalyzer -Path MaillistSynk.ps1 -Recurse -Outvariable issues
            $errors   = $issues.Where({$_.Severity -eq 'Error'})
            $warnings = $issues.Where({$_.Severity -eq 'Warning'})
            $Informations = $issues.Where({$_.Severity -eq 'Information'})
            if ($errors) {
                Write-Error "There were $($errors.Count) errors, $($Informations.Count) informations and $($warnings.Count) warnings total." -ErrorAction Stop
            } else {
                Write-Output "There were $($errors.Count) errors, $($Informations.Count) informations and $($warnings.Count) warnings total."
            }
